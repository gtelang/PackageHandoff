#+HTML_HEAD: <style>pre.src {background-color: #303030; color: #e5e5e5;} </style>
#+HTML_HEAD_EXTRA: <style> blockquote {background:#EEEEEE; padding: 3px 13px}</style>
#+HTML_HEAD: <style>pre.src {background-color: #303030; color: #e5e5e5;} </style>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org-style.css"/>
#+TITLE: The Package Handoff Library
* Introduction

The following Euclidean Steiner-Tree question was posed in CG group while discussing
a recent paper by Craig Tovey [fn:1]: 

[fn:1] That paper gave heuristics for transporting multiple packages from their sources
to destinations along a graph with $r$ co-ordinating carrier robots.


#+BEGIN_quote
There are $m$ mobile carrier-robots initially located at $\{(x^{r}_j, y^{r}_j)\}_{j=1}^m \subseteq \mathbb{R}^2$.
For each $j$, where $1 \leq j \leq m$, robot $r_j$ is able to move in any direction with a maximum speed $v_j$.
If two robots meet at a point in the course of their motion, they can exchange an arbitrary number of
items they each carry. For simplicity, assume that each of the $m$ robots has infinite fuel and
an infinite weight-carrying capacity.

If you are given $n$ stationary packages tagged $p_1, p_2, \ldots p_n$ located respectively at
$\{(x^{s}_i, y^{s}_i)\}_{i=1}^n$ all of which must get to their destinations $\{(x^{t}_i, y^{t}_i)\}_{i=1}^n$
using the $m$ robots, how can you construct a schedule for the robots to transport
all packages to their destinations "quickly" ?
#+END_quote

We get different cost criteria based on the interpretation of "quick": min-sum. or min-max. 
The /*min-sum*/ problem asks to minimize the sum of the travel times of all packages, while 
the /*min-max*/ requires the maximum of their delivery-times to be minimized.

A real world instance of this problem is when a taxi-service must co-ordinate
its fleet of cabs to transport passengers located at different points on the map, 
to their destinations.

Here are a few variations on this problem's theme.  

- What if only one package needs to be transported i.e. $n=1$ ? In this case, min-sum and
  min-max objective functions are equal. 
- What if $n=1$ /and/ the package must move along a straight-line from its source all the way
 to its destination. This is also an interesting question for the multiple-robot case.
  i.e. all packages must move along a straight line from their origin to their destination.
- What if $n=2$?
- What if every robot could travel with the same maximum speed $v_j=V$ but has only limited fuel?
  Two additional sub-constraints might be of interest.
   - What if every robot is constrained to move back into its original position after it does
     all its handoffs as required by the schedule.
   - What if a robot is allowed to move only along the horizontal and vertical directions?

* Theory
* Experiments

I've created a private Github repository, *[[https://github.com/gtelang/packagehandoff][packagehandoff]]* ,which contains code for experimenting
with various heuristics for solving package-handoff problems. It also has a wiki 
containing a motley collection of checklists, todos, braindumps and notes-to-self being made while 
designing library.

I plan to implement the code using the Haskell platform, with occasional calls to C++ libraries.

The main Haskell and C/C++ libraries to be used by the library are
0. Reactive Banana
1. CGAL (via C-wrappers)
2. GSL  (via C-wrappers)
3. Diagrams (for its computations): (it has many geometric primitives like the left-turn test)
4. Jon Shewchuk's geometric predicates (directly via the FFI)
5. Cplex-interface (for optimization)
6. GLPK-interface  (for linear programming)
7. FGL (native Haskell), iGraph and the BGL( both with C bindings via FFI)
8. GeoSteiner (C bindings via the FFI) (for Steiner Tree computations)
9. Gloss (for interactive input)

Different heuristics for both single and multi-package will be implemented atop the interactive system
outlined in the next section. 

** Specification

The executable starts in one of two modes. 
#+BEGIN_SRC sh
<prompt> ./main --variable-velocity # Fuel = ∞ ∀ robots,
<prompt> ./main --bounded-fuel # Max-Velocity = 1.0 ∀ robots
#+END_SRC
Depending on the modes, the appropriate algorithms are activated.  Once the schedule 
has been computed, it is written out as a  YAML file, then rendered or animated. [fn:2]

[fn:2] A benign bug in Gloss (with The GLUT backend) terminates the program after 
closing the canvas (but see [[http://stackoverflow.com/a/39622163/505306][this]] for a possible solution!). 


Data is inserted into the canvas as follows. 
- Left-mouse button *dbl-click* :: @@html:<font color = "red">@@ Insert Robots   @@html:</font>@@
- Right-mouse button *dbl-click* :: @@html:<font color = "red">@@ Insert Packages    @@html:</font>@@
- Scroll-wheel ::  
    - @@html:<font color = "red">@@Adjust fuel (disk size) @@html:</font>@@  
    - @@html:<font color = "red">@@Adjust speed (disk color on a spectrum) @@html:</font>@@
- Right-mouse button *single-click* :: 
     When done on robots/packages select for editing
     - Left-mouse *drag*  :: Translate robots/packages as a group
     - Scroll-Wheel :: Adjust group properties in increments
     - Delete :: Delete group
                 
I will be using all of Diagrams' inbuilt data-types for things such as points, 
vectors, planes and other things. I might have to use gloss3d/OpenGL/three.js(via GHCJS)
for visualizing problems like these in 3d.

For more sophisticated algorithms, I shall be using CGAL via the C-FFI. For simpler ones, 
Diagrams and Boost::Geometry should suffice. Examples of algorithms in Boost::Geometry are: 
   - Area and Perimeter
   - Centroid
   - Convex Hull
   - Axis Aligned Bounding Box etc.
   - Unions and [[http://www.boost.org/doc/libs/1_61_0/libs/geometry/doc/html/geometry/reference/algorithms/intersection.html][Intersections]] of two geometries, like polygons! 
   The full list is available [[http://www.boost.org/doc/libs/1_61_0/libs/geometry/doc/html/geometry/reference/algorithms.html][here]].

Much of BoostGeometry code is based on the notion of C++ concepts, which are very 
similar to Haskell's typeclasses.  
** Layout   
The code will consist of the following files. 

- Main.hs ::  All setup, profiling work goes here. 
 
- PackageHandoffUtilities.hs :: Common functions, Typeclasses, Event handlers, and other plumbing

- ProbX.hs ::  Variants we will be trying to solve are:
     - One Package      , Variable Velocity, ∞ fuel
     - One Package      , Velocity 1.0      , Bounded fuel
     - Multiple Packages, Variable Velocity , ∞ fuel
     - Multiple Packages, Velocity 1.0      , Bounded fuel
         

** Source Code [fn:3]
[fn:3] For the /Main.hs/ files, have a look inside *codeHaskell-pho/app*


*** PackageHandoffPrelude.hs
*PackageHandoffPrelude.hs* contains data-structures and routines common to all package-handoff 
variants. This section describes the code therein. First, import necessary libraries and make 
some descriptive type-synonyms. 
 
#+BEGIN_SRC haskell :tangle codeHaskell-pho/src/PackageHandoffPrelude.hs
  {- | Common Data-Structures and Functions. -}

  {-# LANGUAGE NoMonomorphismRestriction #-}
  {-# LANGUAGE TemplateHaskell           #-}
  {-# LANGUAGE TypeFamilies              #-}
  {-# LANGUAGE GADTs                     #-}
  module PackageHandoffPrelude where
  import Diagrams.Prelude
  import qualified Data.Map as Map
  
  type Packages a  = [Package a]
#+END_SRC

The *Package* data-type stores the Cartesian co-ordinates of the *source* and *target* points 
of a package.
#+BEGIN_SRC haskell  :tangle codeHaskell-pho/src/PackageHandoffPrelude.hs
  data Package a = Package { source :: Point V2 a,
                             target :: Point V2 a 
                           } deriving (Show)
#+END_SRC

Each robot will travel along a _piece-wise linear_ curve, its vertices being sources/destinations of the packages 
and the rendezvous points where package-handoffs must occur. With that in mind, it is natural to represent the route 
for a single robot, as a *Trajectory*, which is a collection of *Link*'s and the global schedule being a collection 
of *Trajectory* s. Each *Link* is like a arrow in $\mathbb{R}^2$ tagged data such as which packages travelled along 
that link, and a description of the package-exchanges that must take place at the link's *head*. 

#+BEGIN_SRC haskell :tangle codeHaskell-pho/src/PackageHandoffPrelude.hs
  data Robot a = Robot { idx          :: Int,
                         initPosition :: Point V2 a
                     } deriving (Show) 
 
  -- We define Robot Equality based on their indices. 
  -- since two Robots are allowed to start at the same position. 
  instance Eq (Robot a) where 
     Robot idx1 _ == Robot idx2 _ = (idx1 == idx2)

  {- | World consists of only robots and packages. -}
  data World a = World { robots   :: [Robot a], 
                         packages :: [Package a]
                        } deriving (Show) 
               
  {- | Load carried across a link of the trajectory along with a description of 
   the exchanges which take place at the link's head. -} 
  data Load a =  -- Single package load, possibly give to the Robot inside Maybe functor  
               SPack (Package a, Maybe (Robot a))    
               -- Multi-package load, possibly give each to the Robot inside Maybe functor 
             | MPack [([Package a], Maybe (Robot a))]  
               -- Zero Load, nothing to give to anybody!
             | Nil                                                      
               deriving (Show)

   {- | A single link of the trajectory -}
  data Link a = Link { head :: Point V2 a, 
                       load :: Load a, 
                       waitTimeAtHead  :: Double
                      } deriving (Show)

  {- | Schedule for a single robot.-} 
  data Trajectory a = Trajectory [ Link a ]  
                      deriving (Show)

  {- | Schedule for a collection of robots. In one-one 
        correspondence with the robots list of the World -}
  type Schedule a  = [ Trajectory a ] 
 #+END_SRC

Note that I have parametrized the types above: the argument `a` in the type-constructor
will stand for either Double or Int. Infact, I might even want to parametrize the 
vector space, if I am going to be solving Package-Handoff problems in three dimensions too.
Parametrizing on Int will be useful if robots are constrained to integer grid points.

Note that *World* knows _nothing_ about the input source from which it came: 
it might have been a file, or it could have been inserted via a Gloss or a Diagrams canvas.  
Keeping the algorithmic and the input/output codes strictly decoupled is essential for making 
the code more modular. 

It also doesn't know anything about the current-time on the clock. /That/ clocking, if needed, will 
be taken care by a wrapper data-structure used by the visualization/animation routines of diagrams or gloss.

Note, that I have not included the fuel and speed attributes of a robot into the Robot data-type. That
allows us to express the kind of routing being done, and also enables us to exploit currying for 
interesting purposes. One could, even make the position field-separate, but for the moment, 
I am placing that inside the robot-field itself. To make changes via, gloss-functions, I will 
use slightly fancier tricks. Another justification for this design decision is that, we identify a 
configuration of robots with their starting positions. For a given configuration, the only items 
that we would need to tweak are speed and velocity. 

By separating the speed and the fuel from the Robot data-type, the type-signatures of the 
algorithms become more expressive.

***  SinglePackageRouting.hs

#+BEGIN_SRC haskell :tangle  codeHaskell-pho/src/SinglePackageRouting.hs
  {-# LANGUAGE NoMonomorphismRestriction #-}
  {-# LANGUAGE TemplateHaskell           #-}
  {-# LANGUAGE TypeFamilies              #-}
  {-# LANGUAGE PatternGuards             #-}
  {-# LANGUAGE TypeApplications          #-}
  module SinglePackageRouting where

  import PackageHandoffPrelude
  import Diagrams.Prelude hiding (blue)
  import qualified Data.List as List
  import Graphics.Gloss
  import Graphics.Gloss.Data.Color
  import Graphics.Gloss.Interface.Pure.Game

  type Speed = Double
  type Time  = Double

  -- A Wrapper around world which includes auxiliary information like velocity etc.
  -- This auxiliary information will be specific to the variant of the problem we are solving.
  -- TODO: Add Schedule.
  data World' a = World' { world       :: World a, -- This is the core-input consisting of robots and packages.
                           robotSpeeds :: [Speed] -- Depending on the problem this information, may or may not be there
                         } deriving (Show)

  #+END_SRC

Every problem and its visualization consists of the TRIPLE of functions = *(handleEvent, renderPicture, scheduler)*. 
  #+BEGIN_SRC haskell :tangle codeHaskell-pho/src/SinglePackageRouting.hs
  -- The <- is critical! For both event and world, since it represents some kind of IO event
  -- Also you just discovered the lens problem! Why did you have to unpack so much!
  -- This event-handler is going to represent the real meat of the code.
  -- You can now fuse the event and world, thing with pattern matching and boolean 
  -- conditions. And yes, currying is lovely!
  -- The more events you add, the more branches will there be
  -- Possible there will be sub-branching too!
  -- generate random colors within the branches too!
  handleEvent :: Event -> World' Float -> World' Float
  handleEvent event world'
         -- Left Mouse Button (Down) :: Insert robot onto canvas. Default speed is 1.0: 
         -- TODO: Clears existing schedule
         -- TODO: Generate a random hash-key sha1 as a unique id.
         | (EventKey (MouseButton LeftButton) Down _ pt@(x,y)) <- event,
           World' (World robots packages) robotSpeeds           <- world' = let  newRobot = Robot 16 (p2 (x,y)) in
                                                                            World' (World (newRobot:robots) packages) (1.0:robotSpeeds) 
         -- Right Mouse Button (Down) :: Insert package source/target onto 
         -- canvas in successive-pairs TODO: Make new empty schedule
         | (EventKey (MouseButton RightButton) Down _ pt@(x,y)) <- event,
           World' (World robots packages) robotSpeeds            <- world' = let  newPackage = Package (p2 (x,y)) (p2 (x,y)) in
                                                                             World' (World robots (package:packages)) robotSpeeds 
         -- Select one or more robots or packages for moving/resizing velocity. 
         -- TODO: Make new empty schedule: Use dumb point-location.
         | (EventKey (MouseButton RightButton) Up _ pt@(x,y)) <- event,
            World' (World robots (Package source' target'):packages) robotSpeeds <- world' = World' (World robots (Package source' p2 (x,y):packages)) robotSpeeds 
         -- Do nothing
         | otherwise = world'
 #+END_SRC

#+BEGIN_SRC haskell :tangle codeHaskell-pho/src/SinglePackageRouting.hs
  -- TODO: Critical: For good visualization, you need good pictures! 
  -- Generate pictures individually. And then glue them together with 
  -- this function.
  renderWorld' :: World' Float -> Picture
  renderWorld' (World' world speeds) = Pictures [map plotRobot (robots world), 
                                                 map plotSourceOf (packages world)]

  plotRobot :: Robot Float-> Picture
  plotRobot (Robot _ initPosn) = (ThickCircle 5 5) # (Translate x y) 
                                  where (x,y) = unp2 initPosn   

  plotSourceOfPackage :: Package Float -> Picture
  plotSourceOfPackage (Package source _) = Pictures (map moveXY [Text "s" , Circle 5 # Color (withAlpha 0.5 blue) ])
                                           where (x,y) = unp2 source -- unpack Diagrams point
                                                 moveXY = Translate x y

  plotTargetOfPackage :: Package Float -> Picture
  plotTargetOfPackage (Package _ target) = Pictures (map moveXY [Text "t" , Circle 5 # Color (withAlpha 0.5 blue) ])
                                           where (x,y) = unp2 target -- unpack Diagrams point
                                                 moveXY = Translate x y

  -- Delete selected elements. If the source is deleted, its 
         -- corresponding target is deleted too 
         -- TODO: Make new empty schedule.
         --  otherwise = world'
         -- Increase velocity of selected elements if they are robots. 
         -- TODO: Make new empty schedule
         -- otherwise = world'
         -- Depending on the key-press run the corresponding scheduler. 
         -- and generate schedule 
         -- TODO: Add this field to World. and generate new schedule.
         -- otherwise = world' 
#+END_SRC

